
ultra.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000688  0000071c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000688  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800118  00800118  00000734  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000764  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eb1  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000844  00000000  00000000  000016b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000570  00000000  00000000  00001ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  0000246c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000506  00000000  00000000  00002530  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005b4  00000000  00000000  00002a36  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002fea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e8       	ldi	r30, 0x88	; 136
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 31       	cpi	r26, 0x1C	; 28
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <main>
  9e:	0c 94 42 03 	jmp	0x684	; 0x684 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z10HCSR04Initv>:

void HCSR04Init()
{
	
	// we're setting the trigger pin as output as it will generate ultrasonic sound wave
	US_DDR|=(1<<US_TRIG_POS);
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	87 b9       	out	0x07, r24	; 7
  ac:	08 95       	ret

000000ae <_Z13HCSR04Triggerv>:

void HCSR04Trigger()
{   // this function will generate ultrasonic sound wave for 15 microseconds
	//Send a 10uS pulse on trigger line
	
	US_PORT|=(1<<US_TRIG_POS);	//high
  ae:	88 b1       	in	r24, 0x08	; 8
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	85 e0       	ldi	r24, 0x05	; 5
  b6:	8a 95       	dec	r24
  b8:	f1 f7       	brne	.-4      	; 0xb6 <_Z13HCSR04Triggerv+0x8>
	
	_delay_us(15);				//wait 15uS
	
	US_PORT&=~(1<<US_TRIG_POS);	//low
  ba:	88 b1       	in	r24, 0x08	; 8
  bc:	8e 7f       	andi	r24, 0xFE	; 254
  be:	88 b9       	out	0x08, r24	; 8
  c0:	08 95       	ret

000000c2 <_Z13GetPulseWidthv>:
	
	uint32_t i,result;

	// Section - 1: the following lines of code before the section - 2 is checking if the ultrasonic is working or not
	// it check the echo pin for a certain amount of time. If there is no signal it means the sensor is not working or not connect properly
	for(i=0;i<600000;i++)
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	dc 01       	movw	r26, r24
  c8:	80 3c       	cpi	r24, 0xC0	; 192
  ca:	27 e2       	ldi	r18, 0x27	; 39
  cc:	92 07       	cpc	r25, r18
  ce:	29 e0       	ldi	r18, 0x09	; 9
  d0:	a2 07       	cpc	r26, r18
  d2:	b1 05       	cpc	r27, r1
  d4:	30 f4       	brcc	.+12     	; 0xe2 <_Z13GetPulseWidthv+0x20>
	{
		if(!(US_PIN & (1<<US_ECHO_POS)))
  d6:	31 99       	sbic	0x06, 1	; 6
  d8:	04 c0       	rjmp	.+8      	; 0xe2 <_Z13GetPulseWidthv+0x20>
	
	uint32_t i,result;

	// Section - 1: the following lines of code before the section - 2 is checking if the ultrasonic is working or not
	// it check the echo pin for a certain amount of time. If there is no signal it means the sensor is not working or not connect properly
	for(i=0;i<600000;i++)
  da:	01 96       	adiw	r24, 0x01	; 1
  dc:	a1 1d       	adc	r26, r1
  de:	b1 1d       	adc	r27, r1
  e0:	f3 cf       	rjmp	.-26     	; 0xc8 <_Z13GetPulseWidthv+0x6>
		continue;	//Line is still low, so wait
		else
		break;		//High edge detected, so break.
	}

	if(i==600000)
  e2:	80 3c       	cpi	r24, 0xC0	; 192
  e4:	97 42       	sbci	r25, 0x27	; 39
  e6:	a9 40       	sbci	r26, 0x09	; 9
  e8:	b1 05       	cpc	r27, r1
  ea:	c1 f1       	breq	.+112    	; 0x15c <_Z13GetPulseWidthv+0x9a>
	
	//High Edge Found
	
	// Section -2 : This section is all about preparing the timer for counting the time of the pulse. Timers in microcontrllers is used for timimg operation
	//Setup Timer1
	TCCR1A=0X00;
  ec:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B=(1<<CS11);	// This line sets the resolution of the timer. Maximum of how much value it should count.
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TCNT1=0x00;			// This line start the counter to start counting time
  f6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  fa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>

	// Section -3 : This section checks weather the there is any object or not
	for(i=0;i<600000;i++)                // the 600000 value is used randomly to denote a very small amount of time, almost 40 miliseconds
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	dc 01       	movw	r26, r24
 104:	80 3c       	cpi	r24, 0xC0	; 192
 106:	27 e2       	ldi	r18, 0x27	; 39
 108:	92 07       	cpc	r25, r18
 10a:	29 e0       	ldi	r18, 0x09	; 9
 10c:	a2 07       	cpc	r26, r18
 10e:	b1 05       	cpc	r27, r1
 110:	68 f4       	brcc	.+26     	; 0x12c <_Z13GetPulseWidthv+0x6a>
	{
		if(US_PIN & (1<<US_ECHO_POS))
 112:	31 9b       	sbis	0x06, 1	; 6
 114:	0b c0       	rjmp	.+22     	; 0x12c <_Z13GetPulseWidthv+0x6a>
		{
			if(TCNT1 > 60000) break; else continue;   // if the TCNT1 value gets higher than 60000 it means there is not object in the range of the sensor
 116:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 11a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 11e:	21 36       	cpi	r18, 0x61	; 97
 120:	3a 4e       	sbci	r19, 0xEA	; 234
 122:	20 f4       	brcc	.+8      	; 0x12c <_Z13GetPulseWidthv+0x6a>
	TCCR1A=0X00;
	TCCR1B=(1<<CS11);	// This line sets the resolution of the timer. Maximum of how much value it should count.
	TCNT1=0x00;			// This line start the counter to start counting time

	// Section -3 : This section checks weather the there is any object or not
	for(i=0;i<600000;i++)                // the 600000 value is used randomly to denote a very small amount of time, almost 40 miliseconds
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	a1 1d       	adc	r26, r1
 128:	b1 1d       	adc	r27, r1
 12a:	ec cf       	rjmp	.-40     	; 0x104 <_Z13GetPulseWidthv+0x42>
		}
		else
		break;
	}

	if(i==600000)
 12c:	80 3c       	cpi	r24, 0xC0	; 192
 12e:	97 42       	sbci	r25, 0x27	; 39
 130:	a9 40       	sbci	r26, 0x09	; 9
 132:	b1 05       	cpc	r27, r1
 134:	b1 f0       	breq	.+44     	; 0x162 <_Z13GetPulseWidthv+0xa0>
	return US_NO_OBSTACLE;	//Indicates time out

	//Falling edge found

	result=TCNT1;          // microcontroller stores the the value of the counted pulse time in the TCNT1 register. So, we're returning this value to the
 136:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 13a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 13e:	a0 e0       	ldi	r26, 0x00	; 0
 140:	b0 e0       	ldi	r27, 0x00	; 0
	// main function for utilizing it later

	//Stop Timer
	TCCR1B=0x00;
 142:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

	if(result > 60000)
 146:	81 36       	cpi	r24, 0x61	; 97
 148:	4a ee       	ldi	r20, 0xEA	; 234
 14a:	94 07       	cpc	r25, r20
 14c:	a1 05       	cpc	r26, r1
 14e:	b1 05       	cpc	r27, r1
 150:	58 f4       	brcc	.+22     	; 0x168 <_Z13GetPulseWidthv+0xa6>
	return US_NO_OBSTACLE;	//No obstacle
	else
	return (result>>1);
 152:	b6 95       	lsr	r27
 154:	a7 95       	ror	r26
 156:	97 95       	ror	r25
 158:	87 95       	ror	r24
 15a:	08 95       	ret
		else
		break;		//High edge detected, so break.
	}

	if(i==600000)
	return US_ERROR;	//Indicates time out
 15c:	8f ef       	ldi	r24, 0xFF	; 255
 15e:	9f ef       	ldi	r25, 0xFF	; 255
 160:	08 95       	ret
		else
		break;
	}

	if(i==600000)
	return US_NO_OBSTACLE;	//Indicates time out
 162:	8e ef       	ldi	r24, 0xFE	; 254
 164:	9f ef       	ldi	r25, 0xFF	; 255
 166:	08 95       	ret

	//Stop Timer
	TCCR1B=0x00;

	if(result > 60000)
	return US_NO_OBSTACLE;	//No obstacle
 168:	8e ef       	ldi	r24, 0xFE	; 254
 16a:	9f ef       	ldi	r25, 0xFF	; 255
	else
	return (result>>1);
}
 16c:	08 95       	ret

0000016e <_Z11lcd_commandh>:
{
	// in order to send command to the lcd first we need to write the command on the data pins. then set the RS pin to zero and enable pin to high
	// then wait for one microseconds and set the enable pin to low, this process repeats again. We're using 4 bit data communication but the data is 8-bit
	// so we will send the data divinding it into two section. Higher 4 bit and lower 4 bit
	// the following lines of codes are used to send higher 4 bits of data
	lcd_port = (lcd_port & 0x0F) | (cmnd & 0xF0);  // this line writes the command on the data pins of the lcd connected to th microcontroller portD pin 4 to 7
 16e:	9b b1       	in	r25, 0x0b	; 11
 170:	9f 70       	andi	r25, 0x0F	; 15
 172:	28 2f       	mov	r18, r24
 174:	20 7f       	andi	r18, 0xF0	; 240
 176:	92 2b       	or	r25, r18
 178:	9b b9       	out	0x0b, r25	; 11
	lcd_port &= ~ (1<<rs);
 17a:	9b b1       	in	r25, 0x0b	; 11
 17c:	9e 7f       	andi	r25, 0xFE	; 254
 17e:	9b b9       	out	0x0b, r25	; 11
	lcd_port |= (1<<en);
 180:	9b b1       	in	r25, 0x0b	; 11
 182:	92 60       	ori	r25, 0x02	; 2
 184:	9b b9       	out	0x0b, r25	; 11
 186:	00 00       	nop
	_delay_us(1);
	lcd_port &= ~ (1<<en);
 188:	9b b1       	in	r25, 0x0b	; 11
 18a:	9d 7f       	andi	r25, 0xFD	; 253
 18c:	9b b9       	out	0x0b, r25	; 11
 18e:	32 e4       	ldi	r19, 0x42	; 66
 190:	3a 95       	dec	r19
 192:	f1 f7       	brne	.-4      	; 0x190 <_Z11lcd_commandh+0x22>
 194:	00 c0       	rjmp	.+0      	; 0x196 <_Z11lcd_commandh+0x28>
	
	// wait 200 microseconds
	_delay_us(200);
	
	// send the lower 4 bit of the data
	lcd_port = (lcd_port & 0x0F) | (cmnd << 4);
 196:	2b b1       	in	r18, 0x0b	; 11
 198:	30 e1       	ldi	r19, 0x10	; 16
 19a:	83 9f       	mul	r24, r19
 19c:	c0 01       	movw	r24, r0
 19e:	11 24       	eor	r1, r1
 1a0:	92 2f       	mov	r25, r18
 1a2:	9f 70       	andi	r25, 0x0F	; 15
 1a4:	89 2b       	or	r24, r25
 1a6:	8b b9       	out	0x0b, r24	; 11
	lcd_port |= (1<<en);
 1a8:	8b b1       	in	r24, 0x0b	; 11
 1aa:	82 60       	ori	r24, 0x02	; 2
 1ac:	8b b9       	out	0x0b, r24	; 11
 1ae:	00 00       	nop
	_delay_us(1);
	lcd_port &= ~ (1<<en);
 1b0:	8b b1       	in	r24, 0x0b	; 11
 1b2:	8d 7f       	andi	r24, 0xFD	; 253
 1b4:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b6:	83 ef       	ldi	r24, 0xF3	; 243
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <_Z11lcd_commandh+0x4c>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <_Z11lcd_commandh+0x52>
 1c0:	00 00       	nop
 1c2:	08 95       	ret

000001c4 <_Z10initializev>:
Article: https://newbiehack.com/MicrocontrollersABeginnersGuideIntroductionandInterfacinganLCD.aspx
The article clearly explains the working of the LCD. Please read it throughly
*/
void initialize (void)
{
	lcd_data_dir = 0xFF;     // this will set the LCD pins connected on the microcontroller as output
 1c4:	8f ef       	ldi	r24, 0xFF	; 255
 1c6:	8a b9       	out	0x0a, r24	; 10
 1c8:	85 ea       	ldi	r24, 0xA5	; 165
 1ca:	9e e0       	ldi	r25, 0x0E	; 14
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <_Z10initializev+0x8>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <_Z10initializev+0xe>
 1d2:	00 00       	nop
	_delay_ms(15);           // to show data on the LCD we need to send commands first then the data
	lcd_command(0x02);       // this command returns the cursor to the first row and first column position
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	0e 94 b7 00 	call	0x16e	; 0x16e <_Z11lcd_commandh>
	lcd_command(0x28);       // please refer to this link to understand meaning of all the commands https://www.electronicsforu.com/technology-trends/learn-electronics/16x2-lcd-pinout-diagram
 1da:	88 e2       	ldi	r24, 0x28	; 40
 1dc:	0e 94 b7 00 	call	0x16e	; 0x16e <_Z11lcd_commandh>
	lcd_command(0x0c);
 1e0:	8c e0       	ldi	r24, 0x0C	; 12
 1e2:	0e 94 b7 00 	call	0x16e	; 0x16e <_Z11lcd_commandh>
	lcd_command(0x06);
 1e6:	86 e0       	ldi	r24, 0x06	; 6
 1e8:	0e 94 b7 00 	call	0x16e	; 0x16e <_Z11lcd_commandh>
	lcd_command(0x01);
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	0e 94 b7 00 	call	0x16e	; 0x16e <_Z11lcd_commandh>
 1f2:	83 ef       	ldi	r24, 0xF3	; 243
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <_Z10initializev+0x32>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <_Z10initializev+0x38>
 1fc:	00 00       	nop
 1fe:	08 95       	ret

00000200 <_Z9lcd_clearv>:
	_delay_ms(2);
}

void lcd_clear()
{
	lcd_command (0x01);   // this line clears the LCD screen
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	0e 94 b7 00 	call	0x16e	; 0x16e <_Z11lcd_commandh>
 206:	83 ef       	ldi	r24, 0xF3	; 243
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <_Z9lcd_clearv+0xa>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <_Z9lcd_clearv+0x10>
 210:	00 00       	nop
	_delay_ms(2);         // waits for two milliseconds
	lcd_command (0x80);   // this line sets the cursor to the row 1 column 1
 212:	80 e8       	ldi	r24, 0x80	; 128
 214:	0e 94 b7 00 	call	0x16e	; 0x16e <_Z11lcd_commandh>
 218:	08 95       	ret

0000021a <_Z9lcd_printPc>:
}


void lcd_print (char *str)
{
 21a:	fc 01       	movw	r30, r24
	// this function will be used to display the string on the LCD screen
	int i;
	for(i=0; str[i]!=0; i++)
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	70 e0       	ldi	r23, 0x00	; 0
 220:	df 01       	movw	r26, r30
 222:	a6 0f       	add	r26, r22
 224:	b7 1f       	adc	r27, r23
 226:	9c 91       	ld	r25, X
 228:	99 23       	and	r25, r25
 22a:	69 f1       	breq	.+90     	; 0x286 <_Z9lcd_printPc+0x6c>
	{
		// we can not send the whole string to the LCD we need to send character by character
		// data sending is same as sending a command. there is one difference, in this case the RS pin will be set to HIGH while the RS pin was set to zero in case of the command sending
		lcd_port = (lcd_port & 0x0F) | (str[i] & 0xF0);
 22c:	8b b1       	in	r24, 0x0b	; 11
 22e:	8f 70       	andi	r24, 0x0F	; 15
 230:	90 7f       	andi	r25, 0xF0	; 240
 232:	98 2b       	or	r25, r24
 234:	9b b9       	out	0x0b, r25	; 11
		lcd_port |= (1<<rs);
 236:	8b b1       	in	r24, 0x0b	; 11
 238:	81 60       	ori	r24, 0x01	; 1
 23a:	8b b9       	out	0x0b, r24	; 11
		lcd_port|= (1<<en);
 23c:	8b b1       	in	r24, 0x0b	; 11
 23e:	82 60       	ori	r24, 0x02	; 2
 240:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 242:	00 00       	nop
		_delay_us(1);
		lcd_port &= ~ (1<<en);
 244:	8b b1       	in	r24, 0x0b	; 11
 246:	8d 7f       	andi	r24, 0xFD	; 253
 248:	8b b9       	out	0x0b, r24	; 11
 24a:	82 e4       	ldi	r24, 0x42	; 66
 24c:	8a 95       	dec	r24
 24e:	f1 f7       	brne	.-4      	; 0x24c <_Z9lcd_printPc+0x32>
 250:	00 c0       	rjmp	.+0      	; 0x252 <_Z9lcd_printPc+0x38>
		_delay_us(200);
		lcd_port = (lcd_port & 0x0F) | (str[i] << 4);
 252:	4b b1       	in	r20, 0x0b	; 11
 254:	9c 91       	ld	r25, X
 256:	80 e1       	ldi	r24, 0x10	; 16
 258:	98 9f       	mul	r25, r24
 25a:	90 01       	movw	r18, r0
 25c:	11 24       	eor	r1, r1
 25e:	94 2f       	mov	r25, r20
 260:	9f 70       	andi	r25, 0x0F	; 15
 262:	29 2b       	or	r18, r25
 264:	2b b9       	out	0x0b, r18	; 11
		lcd_port |= (1<<en);
 266:	9b b1       	in	r25, 0x0b	; 11
 268:	92 60       	ori	r25, 0x02	; 2
 26a:	9b b9       	out	0x0b, r25	; 11
 26c:	00 00       	nop
		_delay_us(1);
		lcd_port &= ~ (1<<en);
 26e:	9b b1       	in	r25, 0x0b	; 11
 270:	9d 7f       	andi	r25, 0xFD	; 253
 272:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 274:	83 ef       	ldi	r24, 0xF3	; 243
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <_Z9lcd_printPc+0x5e>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <_Z9lcd_printPc+0x64>
 27e:	00 00       	nop

void lcd_print (char *str)
{
	// this function will be used to display the string on the LCD screen
	int i;
	for(i=0; str[i]!=0; i++)
 280:	6f 5f       	subi	r22, 0xFF	; 255
 282:	7f 4f       	sbci	r23, 0xFF	; 255
 284:	cd cf       	rjmp	.-102    	; 0x220 <_Z9lcd_printPc+0x6>
 286:	08 95       	ret

00000288 <_Z13lcd_setCursorhh>:
	}
}



void lcd_setCursor(unsigned char x, unsigned char y){    // this function will be used to set cursor. the place where we want to display the data
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	00 d0       	rcall	.+0      	; 0x28e <_Z13lcd_setCursorhh+0x6>
 28e:	cd b7       	in	r28, 0x3d	; 61
 290:	de b7       	in	r29, 0x3e	; 62
	unsigned char adr[] = {0x80, 0xC0};    // the 16x2 LCD has two rows first row has a value of 0x80. So let's say we want to go to the seconds column of first row
 292:	90 e8       	ldi	r25, 0x80	; 128
 294:	99 83       	std	Y+1, r25	; 0x01
 296:	90 ec       	ldi	r25, 0xC0	; 192
 298:	9a 83       	std	Y+2, r25	; 0x02
	// we just need to send the command with adding 2 with the initial value. So, it will be (0x80 + 2) this is how the code works
	lcd_command(adr[y-1] + x-1);
 29a:	e6 2f       	mov	r30, r22
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	31 97       	sbiw	r30, 0x01	; 1
 2a0:	21 e0       	ldi	r18, 0x01	; 1
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	2c 0f       	add	r18, r28
 2a6:	3d 1f       	adc	r19, r29
 2a8:	e2 0f       	add	r30, r18
 2aa:	f3 1f       	adc	r31, r19
 2ac:	90 81       	ld	r25, Z
 2ae:	89 0f       	add	r24, r25
 2b0:	81 50       	subi	r24, 0x01	; 1
 2b2:	0e 94 b7 00 	call	0x16e	; 0x16e <_Z11lcd_commandh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b6:	31 e2       	ldi	r19, 0x21	; 33
 2b8:	3a 95       	dec	r19
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <_Z13lcd_setCursorhh+0x30>
 2bc:	00 00       	nop
	_delay_us(100);
}
 2be:	0f 90       	pop	r0
 2c0:	0f 90       	pop	r0
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	08 95       	ret

000002c8 <main>:

int main()
{
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	00 d0       	rcall	.+0      	; 0x2ce <main+0x6>
 2ce:	00 d0       	rcall	.+0      	; 0x2d0 <main+0x8>
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
	initialize();           // we're initializing the LCD
 2d4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_Z10initializev>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d8:	87 ea       	ldi	r24, 0xA7	; 167
 2da:	91 e6       	ldi	r25, 0x61	; 97
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <main+0x14>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <main+0x1a>
 2e2:	00 00       	nop
		_delay_ms(100);	//Let the LCD Module start


		
		//Set io port direction of sensor
		HCSR04Init();
 2e4:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z10HCSR04Initv>


		DDRC |= (1 << led1) | (1 << led2) | ( 1 << led3) | ( 1 << led4);    // we're setting all the leds as output
 2e8:	87 b1       	in	r24, 0x07	; 7
 2ea:	8c 63       	ori	r24, 0x3C	; 60
 2ec:	87 b9       	out	0x07, r24	; 7
		DDRD |= (1 << led5);                                                 // we need to set the fifth led as output separately because it is on another port
 2ee:	8a b1       	in	r24, 0x0a	; 10
 2f0:	84 60       	ori	r24, 0x04	; 4
 2f2:	8a b9       	out	0x0a, r24	; 10
		//PORTC |= 1 << led1;
		while(1)
		{
			
			//Send a trigger pulse
			HCSR04Trigger();               // calling the ultrasonic sound wave generator function
 2f4:	0e 94 57 00 	call	0xae	; 0xae <_Z13HCSR04Triggerv>

			//Measure the width of pulse
			r=GetPulseWidth();             // getting the duration of the ultrasound took to echo back after hitting the object
 2f8:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z13GetPulseWidthv>

			//Handle Errors
			if(r==US_ERROR)                // if microcontroller doesn't get any pulse then it will set the US_ERROR variable to -1
 2fc:	8f 3f       	cpi	r24, 0xFF	; 255
 2fe:	2f ef       	ldi	r18, 0xFF	; 255
 300:	92 07       	cpc	r25, r18
 302:	49 f4       	brne	.+18     	; 0x316 <main+0x4e>
			// the following code will check if there is error then it will be displayed on the LCD screen
			{
				lcd_setCursor(1, 1);      //lcd_setCursor(column, row)
 304:	61 e0       	ldi	r22, 0x01	; 1
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	0e 94 44 01 	call	0x288	; 0x288 <_Z13lcd_setCursorhh>
				lcd_print("Error!");
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	91 e0       	ldi	r25, 0x01	; 1
 310:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z9lcd_printPc>
 314:	ef cf       	rjmp	.-34     	; 0x2f4 <main+0x2c>
			}
			else
			{
				
				distance=(r*0.034/2.0);	// This will give the distance in centimeters
 316:	bc 01       	movw	r22, r24
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 12 02 	call	0x424	; 0x424 <__floatunsisf>
 320:	26 e9       	ldi	r18, 0x96	; 150
 322:	33 e4       	ldi	r19, 0x43	; 67
 324:	4b e0       	ldi	r20, 0x0B	; 11
 326:	5d e3       	ldi	r21, 0x3D	; 61
 328:	0e 94 78 02 	call	0x4f0	; 0x4f0 <__mulsf3>
 32c:	20 e0       	ldi	r18, 0x00	; 0
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	40 e0       	ldi	r20, 0x00	; 0
 332:	5f e3       	ldi	r21, 0x3F	; 63
 334:	0e 94 78 02 	call	0x4f0	; 0x4f0 <__mulsf3>
 338:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__fixsfsi>
 33c:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <distance+0x1>
 340:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <distance>
				
				
				if (distance != previous_distance)    // the LCD screen only need to be cleared if the distance is changed otherwise it is not required
 344:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__data_end>
 348:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__data_end+0x1>
 34c:	26 17       	cp	r18, r22
 34e:	37 07       	cpc	r19, r23
 350:	11 f0       	breq	.+4      	; 0x356 <main+0x8e>
				{
					lcd_clear();
 352:	0e 94 00 01 	call	0x200	; 0x200 <_Z9lcd_clearv>
				}
				
				lcd_setCursor(1, 1);      // set the row and column to display the data
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	0e 94 44 01 	call	0x288	; 0x288 <_Z13lcd_setCursorhh>
				lcd_print("Distance = ");
 35e:	87 e0       	ldi	r24, 0x07	; 7
 360:	91 e0       	ldi	r25, 0x01	; 1
 362:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z9lcd_printPc>
				lcd_setCursor(12, 1);      //lcd_setCursor(column, row)
 366:	61 e0       	ldi	r22, 0x01	; 1
 368:	8c e0       	ldi	r24, 0x0C	; 12
 36a:	0e 94 44 01 	call	0x288	; 0x288 <_Z13lcd_setCursorhh>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 36e:	4a e0       	ldi	r20, 0x0A	; 10
 370:	be 01       	movw	r22, r28
 372:	6f 5f       	subi	r22, 0xFF	; 255
 374:	7f 4f       	sbci	r23, 0xFF	; 255
 376:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <distance>
 37a:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <distance+0x1>
 37e:	0e 94 0d 03 	call	0x61a	; 0x61a <__itoa_ncheck>
				itoa(distance, numberString, 10);    // distance is an integer number, we can not display integer directly on the LCD. this line converts integer into array of character
				lcd_print(numberString);
 382:	ce 01       	movw	r24, r28
 384:	01 96       	adiw	r24, 0x01	; 1
 386:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z9lcd_printPc>
				lcd_setCursor(14, 1);      //set the row to 1 and and column to 14 to display the data
 38a:	61 e0       	ldi	r22, 0x01	; 1
 38c:	8e e0       	ldi	r24, 0x0E	; 14
 38e:	0e 94 44 01 	call	0x288	; 0x288 <_Z13lcd_setCursorhh>
				lcd_print(" cm");
 392:	83 e1       	ldi	r24, 0x13	; 19
 394:	91 e0       	ldi	r25, 0x01	; 1
 396:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z9lcd_printPc>
				
				
				
				
				previous_distance = distance;
 39a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <distance>
 39e:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <distance+0x1>
 3a2:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 3a6:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 3aa:	8b e4       	ldi	r24, 0x4B	; 75
 3ac:	9d e1       	ldi	r25, 0x1D	; 29
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <main+0xe6>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <main+0xec>
 3b4:	00 00       	nop
 3b6:	9e cf       	rjmp	.-196    	; 0x2f4 <main+0x2c>

000003b8 <__fixsfsi>:
 3b8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__fixunssfsi>
 3bc:	68 94       	set
 3be:	b1 11       	cpse	r27, r1
 3c0:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <__fp_szero>
 3c4:	08 95       	ret

000003c6 <__fixunssfsi>:
 3c6:	0e 94 57 02 	call	0x4ae	; 0x4ae <__fp_splitA>
 3ca:	88 f0       	brcs	.+34     	; 0x3ee <__fixunssfsi+0x28>
 3cc:	9f 57       	subi	r25, 0x7F	; 127
 3ce:	98 f0       	brcs	.+38     	; 0x3f6 <__fixunssfsi+0x30>
 3d0:	b9 2f       	mov	r27, r25
 3d2:	99 27       	eor	r25, r25
 3d4:	b7 51       	subi	r27, 0x17	; 23
 3d6:	b0 f0       	brcs	.+44     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3d8:	e1 f0       	breq	.+56     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 3da:	66 0f       	add	r22, r22
 3dc:	77 1f       	adc	r23, r23
 3de:	88 1f       	adc	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	1a f0       	brmi	.+6      	; 0x3ea <__fixunssfsi+0x24>
 3e4:	ba 95       	dec	r27
 3e6:	c9 f7       	brne	.-14     	; 0x3da <__fixunssfsi+0x14>
 3e8:	14 c0       	rjmp	.+40     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 3ea:	b1 30       	cpi	r27, 0x01	; 1
 3ec:	91 f0       	breq	.+36     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 3ee:	0e 94 71 02 	call	0x4e2	; 0x4e2 <__fp_zero>
 3f2:	b1 e0       	ldi	r27, 0x01	; 1
 3f4:	08 95       	ret
 3f6:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__fp_zero>
 3fa:	67 2f       	mov	r22, r23
 3fc:	78 2f       	mov	r23, r24
 3fe:	88 27       	eor	r24, r24
 400:	b8 5f       	subi	r27, 0xF8	; 248
 402:	39 f0       	breq	.+14     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 404:	b9 3f       	cpi	r27, 0xF9	; 249
 406:	cc f3       	brlt	.-14     	; 0x3fa <__fixunssfsi+0x34>
 408:	86 95       	lsr	r24
 40a:	77 95       	ror	r23
 40c:	67 95       	ror	r22
 40e:	b3 95       	inc	r27
 410:	d9 f7       	brne	.-10     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 412:	3e f4       	brtc	.+14     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 414:	90 95       	com	r25
 416:	80 95       	com	r24
 418:	70 95       	com	r23
 41a:	61 95       	neg	r22
 41c:	7f 4f       	sbci	r23, 0xFF	; 255
 41e:	8f 4f       	sbci	r24, 0xFF	; 255
 420:	9f 4f       	sbci	r25, 0xFF	; 255
 422:	08 95       	ret

00000424 <__floatunsisf>:
 424:	e8 94       	clt
 426:	09 c0       	rjmp	.+18     	; 0x43a <__floatsisf+0x12>

00000428 <__floatsisf>:
 428:	97 fb       	bst	r25, 7
 42a:	3e f4       	brtc	.+14     	; 0x43a <__floatsisf+0x12>
 42c:	90 95       	com	r25
 42e:	80 95       	com	r24
 430:	70 95       	com	r23
 432:	61 95       	neg	r22
 434:	7f 4f       	sbci	r23, 0xFF	; 255
 436:	8f 4f       	sbci	r24, 0xFF	; 255
 438:	9f 4f       	sbci	r25, 0xFF	; 255
 43a:	99 23       	and	r25, r25
 43c:	a9 f0       	breq	.+42     	; 0x468 <__floatsisf+0x40>
 43e:	f9 2f       	mov	r31, r25
 440:	96 e9       	ldi	r25, 0x96	; 150
 442:	bb 27       	eor	r27, r27
 444:	93 95       	inc	r25
 446:	f6 95       	lsr	r31
 448:	87 95       	ror	r24
 44a:	77 95       	ror	r23
 44c:	67 95       	ror	r22
 44e:	b7 95       	ror	r27
 450:	f1 11       	cpse	r31, r1
 452:	f8 cf       	rjmp	.-16     	; 0x444 <__floatsisf+0x1c>
 454:	fa f4       	brpl	.+62     	; 0x494 <__floatsisf+0x6c>
 456:	bb 0f       	add	r27, r27
 458:	11 f4       	brne	.+4      	; 0x45e <__floatsisf+0x36>
 45a:	60 ff       	sbrs	r22, 0
 45c:	1b c0       	rjmp	.+54     	; 0x494 <__floatsisf+0x6c>
 45e:	6f 5f       	subi	r22, 0xFF	; 255
 460:	7f 4f       	sbci	r23, 0xFF	; 255
 462:	8f 4f       	sbci	r24, 0xFF	; 255
 464:	9f 4f       	sbci	r25, 0xFF	; 255
 466:	16 c0       	rjmp	.+44     	; 0x494 <__floatsisf+0x6c>
 468:	88 23       	and	r24, r24
 46a:	11 f0       	breq	.+4      	; 0x470 <__floatsisf+0x48>
 46c:	96 e9       	ldi	r25, 0x96	; 150
 46e:	11 c0       	rjmp	.+34     	; 0x492 <__floatsisf+0x6a>
 470:	77 23       	and	r23, r23
 472:	21 f0       	breq	.+8      	; 0x47c <__floatsisf+0x54>
 474:	9e e8       	ldi	r25, 0x8E	; 142
 476:	87 2f       	mov	r24, r23
 478:	76 2f       	mov	r23, r22
 47a:	05 c0       	rjmp	.+10     	; 0x486 <__floatsisf+0x5e>
 47c:	66 23       	and	r22, r22
 47e:	71 f0       	breq	.+28     	; 0x49c <__floatsisf+0x74>
 480:	96 e8       	ldi	r25, 0x86	; 134
 482:	86 2f       	mov	r24, r22
 484:	70 e0       	ldi	r23, 0x00	; 0
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	2a f0       	brmi	.+10     	; 0x494 <__floatsisf+0x6c>
 48a:	9a 95       	dec	r25
 48c:	66 0f       	add	r22, r22
 48e:	77 1f       	adc	r23, r23
 490:	88 1f       	adc	r24, r24
 492:	da f7       	brpl	.-10     	; 0x48a <__floatsisf+0x62>
 494:	88 0f       	add	r24, r24
 496:	96 95       	lsr	r25
 498:	87 95       	ror	r24
 49a:	97 f9       	bld	r25, 7
 49c:	08 95       	ret

0000049e <__fp_split3>:
 49e:	57 fd       	sbrc	r21, 7
 4a0:	90 58       	subi	r25, 0x80	; 128
 4a2:	44 0f       	add	r20, r20
 4a4:	55 1f       	adc	r21, r21
 4a6:	59 f0       	breq	.+22     	; 0x4be <__fp_splitA+0x10>
 4a8:	5f 3f       	cpi	r21, 0xFF	; 255
 4aa:	71 f0       	breq	.+28     	; 0x4c8 <__fp_splitA+0x1a>
 4ac:	47 95       	ror	r20

000004ae <__fp_splitA>:
 4ae:	88 0f       	add	r24, r24
 4b0:	97 fb       	bst	r25, 7
 4b2:	99 1f       	adc	r25, r25
 4b4:	61 f0       	breq	.+24     	; 0x4ce <__fp_splitA+0x20>
 4b6:	9f 3f       	cpi	r25, 0xFF	; 255
 4b8:	79 f0       	breq	.+30     	; 0x4d8 <__fp_splitA+0x2a>
 4ba:	87 95       	ror	r24
 4bc:	08 95       	ret
 4be:	12 16       	cp	r1, r18
 4c0:	13 06       	cpc	r1, r19
 4c2:	14 06       	cpc	r1, r20
 4c4:	55 1f       	adc	r21, r21
 4c6:	f2 cf       	rjmp	.-28     	; 0x4ac <__fp_split3+0xe>
 4c8:	46 95       	lsr	r20
 4ca:	f1 df       	rcall	.-30     	; 0x4ae <__fp_splitA>
 4cc:	08 c0       	rjmp	.+16     	; 0x4de <__fp_splitA+0x30>
 4ce:	16 16       	cp	r1, r22
 4d0:	17 06       	cpc	r1, r23
 4d2:	18 06       	cpc	r1, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	f1 cf       	rjmp	.-30     	; 0x4ba <__fp_splitA+0xc>
 4d8:	86 95       	lsr	r24
 4da:	71 05       	cpc	r23, r1
 4dc:	61 05       	cpc	r22, r1
 4de:	08 94       	sec
 4e0:	08 95       	ret

000004e2 <__fp_zero>:
 4e2:	e8 94       	clt

000004e4 <__fp_szero>:
 4e4:	bb 27       	eor	r27, r27
 4e6:	66 27       	eor	r22, r22
 4e8:	77 27       	eor	r23, r23
 4ea:	cb 01       	movw	r24, r22
 4ec:	97 f9       	bld	r25, 7
 4ee:	08 95       	ret

000004f0 <__mulsf3>:
 4f0:	0e 94 8b 02 	call	0x516	; 0x516 <__mulsf3x>
 4f4:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__fp_round>
 4f8:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__fp_pscA>
 4fc:	38 f0       	brcs	.+14     	; 0x50c <__mulsf3+0x1c>
 4fe:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fp_pscB>
 502:	20 f0       	brcs	.+8      	; 0x50c <__mulsf3+0x1c>
 504:	95 23       	and	r25, r21
 506:	11 f0       	breq	.+4      	; 0x50c <__mulsf3+0x1c>
 508:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__fp_inf>
 50c:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <__fp_nan>
 510:	11 24       	eor	r1, r1
 512:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <__fp_szero>

00000516 <__mulsf3x>:
 516:	0e 94 4f 02 	call	0x49e	; 0x49e <__fp_split3>
 51a:	70 f3       	brcs	.-36     	; 0x4f8 <__mulsf3+0x8>

0000051c <__mulsf3_pse>:
 51c:	95 9f       	mul	r25, r21
 51e:	c1 f3       	breq	.-16     	; 0x510 <__mulsf3+0x20>
 520:	95 0f       	add	r25, r21
 522:	50 e0       	ldi	r21, 0x00	; 0
 524:	55 1f       	adc	r21, r21
 526:	62 9f       	mul	r22, r18
 528:	f0 01       	movw	r30, r0
 52a:	72 9f       	mul	r23, r18
 52c:	bb 27       	eor	r27, r27
 52e:	f0 0d       	add	r31, r0
 530:	b1 1d       	adc	r27, r1
 532:	63 9f       	mul	r22, r19
 534:	aa 27       	eor	r26, r26
 536:	f0 0d       	add	r31, r0
 538:	b1 1d       	adc	r27, r1
 53a:	aa 1f       	adc	r26, r26
 53c:	64 9f       	mul	r22, r20
 53e:	66 27       	eor	r22, r22
 540:	b0 0d       	add	r27, r0
 542:	a1 1d       	adc	r26, r1
 544:	66 1f       	adc	r22, r22
 546:	82 9f       	mul	r24, r18
 548:	22 27       	eor	r18, r18
 54a:	b0 0d       	add	r27, r0
 54c:	a1 1d       	adc	r26, r1
 54e:	62 1f       	adc	r22, r18
 550:	73 9f       	mul	r23, r19
 552:	b0 0d       	add	r27, r0
 554:	a1 1d       	adc	r26, r1
 556:	62 1f       	adc	r22, r18
 558:	83 9f       	mul	r24, r19
 55a:	a0 0d       	add	r26, r0
 55c:	61 1d       	adc	r22, r1
 55e:	22 1f       	adc	r18, r18
 560:	74 9f       	mul	r23, r20
 562:	33 27       	eor	r19, r19
 564:	a0 0d       	add	r26, r0
 566:	61 1d       	adc	r22, r1
 568:	23 1f       	adc	r18, r19
 56a:	84 9f       	mul	r24, r20
 56c:	60 0d       	add	r22, r0
 56e:	21 1d       	adc	r18, r1
 570:	82 2f       	mov	r24, r18
 572:	76 2f       	mov	r23, r22
 574:	6a 2f       	mov	r22, r26
 576:	11 24       	eor	r1, r1
 578:	9f 57       	subi	r25, 0x7F	; 127
 57a:	50 40       	sbci	r21, 0x00	; 0
 57c:	9a f0       	brmi	.+38     	; 0x5a4 <__mulsf3_pse+0x88>
 57e:	f1 f0       	breq	.+60     	; 0x5bc <__mulsf3_pse+0xa0>
 580:	88 23       	and	r24, r24
 582:	4a f0       	brmi	.+18     	; 0x596 <__mulsf3_pse+0x7a>
 584:	ee 0f       	add	r30, r30
 586:	ff 1f       	adc	r31, r31
 588:	bb 1f       	adc	r27, r27
 58a:	66 1f       	adc	r22, r22
 58c:	77 1f       	adc	r23, r23
 58e:	88 1f       	adc	r24, r24
 590:	91 50       	subi	r25, 0x01	; 1
 592:	50 40       	sbci	r21, 0x00	; 0
 594:	a9 f7       	brne	.-22     	; 0x580 <__mulsf3_pse+0x64>
 596:	9e 3f       	cpi	r25, 0xFE	; 254
 598:	51 05       	cpc	r21, r1
 59a:	80 f0       	brcs	.+32     	; 0x5bc <__mulsf3_pse+0xa0>
 59c:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__fp_inf>
 5a0:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <__fp_szero>
 5a4:	5f 3f       	cpi	r21, 0xFF	; 255
 5a6:	e4 f3       	brlt	.-8      	; 0x5a0 <__mulsf3_pse+0x84>
 5a8:	98 3e       	cpi	r25, 0xE8	; 232
 5aa:	d4 f3       	brlt	.-12     	; 0x5a0 <__mulsf3_pse+0x84>
 5ac:	86 95       	lsr	r24
 5ae:	77 95       	ror	r23
 5b0:	67 95       	ror	r22
 5b2:	b7 95       	ror	r27
 5b4:	f7 95       	ror	r31
 5b6:	e7 95       	ror	r30
 5b8:	9f 5f       	subi	r25, 0xFF	; 255
 5ba:	c1 f7       	brne	.-16     	; 0x5ac <__mulsf3_pse+0x90>
 5bc:	fe 2b       	or	r31, r30
 5be:	88 0f       	add	r24, r24
 5c0:	91 1d       	adc	r25, r1
 5c2:	96 95       	lsr	r25
 5c4:	87 95       	ror	r24
 5c6:	97 f9       	bld	r25, 7
 5c8:	08 95       	ret

000005ca <__fp_inf>:
 5ca:	97 f9       	bld	r25, 7
 5cc:	9f 67       	ori	r25, 0x7F	; 127
 5ce:	80 e8       	ldi	r24, 0x80	; 128
 5d0:	70 e0       	ldi	r23, 0x00	; 0
 5d2:	60 e0       	ldi	r22, 0x00	; 0
 5d4:	08 95       	ret

000005d6 <__fp_nan>:
 5d6:	9f ef       	ldi	r25, 0xFF	; 255
 5d8:	80 ec       	ldi	r24, 0xC0	; 192
 5da:	08 95       	ret

000005dc <__fp_pscA>:
 5dc:	00 24       	eor	r0, r0
 5de:	0a 94       	dec	r0
 5e0:	16 16       	cp	r1, r22
 5e2:	17 06       	cpc	r1, r23
 5e4:	18 06       	cpc	r1, r24
 5e6:	09 06       	cpc	r0, r25
 5e8:	08 95       	ret

000005ea <__fp_pscB>:
 5ea:	00 24       	eor	r0, r0
 5ec:	0a 94       	dec	r0
 5ee:	12 16       	cp	r1, r18
 5f0:	13 06       	cpc	r1, r19
 5f2:	14 06       	cpc	r1, r20
 5f4:	05 06       	cpc	r0, r21
 5f6:	08 95       	ret

000005f8 <__fp_round>:
 5f8:	09 2e       	mov	r0, r25
 5fa:	03 94       	inc	r0
 5fc:	00 0c       	add	r0, r0
 5fe:	11 f4       	brne	.+4      	; 0x604 <__fp_round+0xc>
 600:	88 23       	and	r24, r24
 602:	52 f0       	brmi	.+20     	; 0x618 <__fp_round+0x20>
 604:	bb 0f       	add	r27, r27
 606:	40 f4       	brcc	.+16     	; 0x618 <__fp_round+0x20>
 608:	bf 2b       	or	r27, r31
 60a:	11 f4       	brne	.+4      	; 0x610 <__fp_round+0x18>
 60c:	60 ff       	sbrs	r22, 0
 60e:	04 c0       	rjmp	.+8      	; 0x618 <__fp_round+0x20>
 610:	6f 5f       	subi	r22, 0xFF	; 255
 612:	7f 4f       	sbci	r23, 0xFF	; 255
 614:	8f 4f       	sbci	r24, 0xFF	; 255
 616:	9f 4f       	sbci	r25, 0xFF	; 255
 618:	08 95       	ret

0000061a <__itoa_ncheck>:
 61a:	bb 27       	eor	r27, r27
 61c:	4a 30       	cpi	r20, 0x0A	; 10
 61e:	31 f4       	brne	.+12     	; 0x62c <__itoa_ncheck+0x12>
 620:	99 23       	and	r25, r25
 622:	22 f4       	brpl	.+8      	; 0x62c <__itoa_ncheck+0x12>
 624:	bd e2       	ldi	r27, 0x2D	; 45
 626:	90 95       	com	r25
 628:	81 95       	neg	r24
 62a:	9f 4f       	sbci	r25, 0xFF	; 255
 62c:	0c 94 19 03 	jmp	0x632	; 0x632 <__utoa_common>

00000630 <__utoa_ncheck>:
 630:	bb 27       	eor	r27, r27

00000632 <__utoa_common>:
 632:	fb 01       	movw	r30, r22
 634:	55 27       	eor	r21, r21
 636:	aa 27       	eor	r26, r26
 638:	88 0f       	add	r24, r24
 63a:	99 1f       	adc	r25, r25
 63c:	aa 1f       	adc	r26, r26
 63e:	a4 17       	cp	r26, r20
 640:	10 f0       	brcs	.+4      	; 0x646 <__utoa_common+0x14>
 642:	a4 1b       	sub	r26, r20
 644:	83 95       	inc	r24
 646:	50 51       	subi	r21, 0x10	; 16
 648:	b9 f7       	brne	.-18     	; 0x638 <__utoa_common+0x6>
 64a:	a0 5d       	subi	r26, 0xD0	; 208
 64c:	aa 33       	cpi	r26, 0x3A	; 58
 64e:	08 f0       	brcs	.+2      	; 0x652 <__utoa_common+0x20>
 650:	a9 5d       	subi	r26, 0xD9	; 217
 652:	a1 93       	st	Z+, r26
 654:	00 97       	sbiw	r24, 0x00	; 0
 656:	79 f7       	brne	.-34     	; 0x636 <__utoa_common+0x4>
 658:	b1 11       	cpse	r27, r1
 65a:	b1 93       	st	Z+, r27
 65c:	11 92       	st	Z+, r1
 65e:	cb 01       	movw	r24, r22
 660:	0c 94 32 03 	jmp	0x664	; 0x664 <strrev>

00000664 <strrev>:
 664:	dc 01       	movw	r26, r24
 666:	fc 01       	movw	r30, r24
 668:	67 2f       	mov	r22, r23
 66a:	71 91       	ld	r23, Z+
 66c:	77 23       	and	r23, r23
 66e:	e1 f7       	brne	.-8      	; 0x668 <strrev+0x4>
 670:	32 97       	sbiw	r30, 0x02	; 2
 672:	04 c0       	rjmp	.+8      	; 0x67c <strrev+0x18>
 674:	7c 91       	ld	r23, X
 676:	6d 93       	st	X+, r22
 678:	70 83       	st	Z, r23
 67a:	62 91       	ld	r22, -Z
 67c:	ae 17       	cp	r26, r30
 67e:	bf 07       	cpc	r27, r31
 680:	c8 f3       	brcs	.-14     	; 0x674 <strrev+0x10>
 682:	08 95       	ret

00000684 <_exit>:
 684:	f8 94       	cli

00000686 <__stop_program>:
 686:	ff cf       	rjmp	.-2      	; 0x686 <__stop_program>
